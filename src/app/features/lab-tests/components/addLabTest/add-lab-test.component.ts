import { Component, Input, OnInit, inject, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { ReactiveFormsModule, FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';
import { LabTestFacade } from '@app/features/lab-tests/facade/lab-test.facade';
import { LabTestEntity } from '@app/features/lab-tests/domain/lab-test.entity';
import { AuthService } from '@app/auth/auth.service';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Observable } from 'rxjs';
import { startWith, map } from 'rxjs/operators';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatListModule } from '@angular/material/list';
import { PatientFacade } from '@app/features/patients/facade/patient.facade';
import { Patient } from '@app/features/patients/domain/patient-entity';

@Component({
  selector: 'app-add-lab-test',
  standalone: true,
  imports: [
    CommonModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    ReactiveFormsModule,
    HttpClientModule,
    MatAutocompleteModule,
    MatListModule,
  ],
  templateUrl: './add-lab-test.component.html',
  styleUrls: ['./add-lab-test.component.css'],
})
export class AddLabTestComponent implements OnInit {
  @Input() patientId: number | undefined;
  @Output() onLabTestAdded = new EventEmitter<void>();
  @Output() cancel = new EventEmitter<void>();

  private labTestFacade = inject(LabTestFacade);
  private patientFacade = inject(PatientFacade);
  private authService = inject(AuthService);
  private fb = inject(FormBuilder);
  private http = inject(HttpClient);

  labTestForm: FormGroup;
  currentLabTestForm: FormGroup; // New FormGroup for single input
  addedLabTests: LabTestEntity[] = []; // Array to store added lab tests
  labTestList: string[] = [];
  filteredLabTests: Observable<string[]> = new Observable<string[]>(); // Changed to single Observable
  patient: Patient | undefined;

  constructor() {
    this.currentLabTestForm = this.fb.group({
      labTestName: ['', Validators.required],
    });
    this.labTestForm = this.fb.group({}); // Main form group, can be empty or hold other controls if needed
  }

  ngOnInit(): void {
    this.http.get<string[]>('assets/lab_tests.json').subscribe(data => {
      this.labTestList = data;
    });

    this.filteredLabTests = this.currentLabTestForm.get('labTestName')!.valueChanges.pipe(
      startWith(''),
      map(value => this._filter(value || ''))
    );

    if (this.patientId) {
      this.patientFacade.loadPatient(this.patientId);
      this.patientFacade.patient$.subscribe(patient => {
        if(patient) {
          this.patient = patient;
        }
      });
    }
  }

  addLabTestToAddedList() {
    if (this.currentLabTestForm.valid) {
      const newLabTest: LabTestEntity = new LabTestEntity({
        labTestId: 0, // Temporary, will be generated by backend
        labTestName: this.currentLabTestForm.value.labTestName,
        labTestDate: new Date().toISOString().split('T')[0],
        patientId: this.patientId!,
      });
      this.addedLabTests.push(newLabTest);
      this.currentLabTestForm.reset();
    }
  }

  removeLabTest(index: number) {
    this.addedLabTests.splice(index, 1);
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();
    return this.labTestList.filter(option => option.toLowerCase().includes(filterValue));
  }

  onPrint() {
    const labTestsToPrint = this.addedLabTests
      .map((test: LabTestEntity) => test.labTestName)
      .filter((name: string) => name.trim() !== '');

    if (this.patient && this.authService.currentUserId) {
      this.labTestFacade.printLabTests(labTestsToPrint, this.patient, this.authService.currentUserId);
    } else {
      console.error("Patient or user not loaded");
    }
  }

  onSubmit() {
    if (this.addedLabTests.length > 0 && this.patientId) {
      this.addedLabTests.forEach(labTest => {
        this.labTestFacade.addLabTest(labTest);
        console.log('component : Lab test added:', labTest);
      });
      this.onLabTestAdded.emit();
    }
  }

  onCancel() {
    this.cancel.emit();
  }
}
