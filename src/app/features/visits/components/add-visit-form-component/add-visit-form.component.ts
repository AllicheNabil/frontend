import { Component, EventEmitter, Input, Output, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormGroup, FormControl, Validators } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { AddVisitUseCase } from '@app/features/visits/domain/visitUsecases/addVisitUseCase';
import { PatientVisitEntity } from '@app/features/visits/domain/patient-visit-entity';

@Component({
  selector: 'app-add-visit-form',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
  ],
  templateUrl: './add-visit-form.component.html',
  styleUrls: ['./add-visit-form.component.css'],
})
export class AddVisitFormComponent {
  @Input() patientId!: number;
  @Output() visitAdded = new EventEmitter<void>();
  @Output() cancel = new EventEmitter<void>();

  private addVisitUseCase = inject(AddVisitUseCase);

  visitForm = new FormGroup({
    reason: new FormControl('', Validators.required),
    physicalExamination: new FormControl(''),
    weight: new FormControl(''),
    weightPercentile: new FormControl(''),
    height: new FormControl(''),
    heightPercentile: new FormControl(''),
    headCirumference: new FormControl(''),
    headCirumferencePercentile: new FormControl(''),
    bmi: new FormControl(''),
    diagnosis: new FormControl('', Validators.required),
    visitDate: new FormControl(new Date().toISOString().split('T')[0], Validators.required),
    visitHour: new FormControl(new Date().toTimeString().split(' ')[0].substring(0, 5), Validators.required),
  });

  onSubmit() {
    console.log('onSubmit() called.');
    console.log('Form valid:', this.visitForm.valid);
    if (this.visitForm.valid) {
      const formValues = this.visitForm.value;
      const newVisit = new PatientVisitEntity({
        visitId: 0, // Will be generated by the backend
        patientId: this.patientId,
        reason: formValues.reason!,
        physicalExamination: formValues.physicalExamination || '',
        weight: formValues.weight || '',
        weightPercentile: formValues.weightPercentile || '',
        height: formValues.height || '',
        heightPercentile: formValues.heightPercentile || '',
        headCirumference: formValues.headCirumference || '',
        headCirumferencePercentile: formValues.headCirumferencePercentile || '',
        bmi: formValues.bmi || '',
        diagnosis: formValues.diagnosis!,
        visitDate: formValues.visitDate!,
        visitHour: formValues.visitHour!,
      });

      this.addVisitUseCase.execute(newVisit).subscribe({
        next: () => {
          console.log('addVisitUseCase.execute() next callback triggered.');
          this.visitAdded.emit();
          console.log('Visit added successfully!');
        },
        error: (error: Error) => {
          console.error('addVisitUseCase.execute() error callback triggered:', error);
          console.error('Error adding visit:', error);
        },
      });
    }
  }

  onCancel() {
    this.cancel.emit();
  }
}
