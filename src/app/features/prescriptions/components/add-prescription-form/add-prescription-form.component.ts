import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { AddMedicationUseCase } from '@app/features/prescriptions/domain/usecases/AddMedicationUseCase';
import { MedicationEntity } from '@app/features/prescriptions/domain/MedicationEntity';
import { MatIconModule } from '@angular/material/icon';
import { MatSelectModule } from '@angular/material/select';
import { HttpClient } from '@angular/common/http';
import { Observable, startWith, map } from 'rxjs';
import { MatAutocompleteModule } from '@angular/material/autocomplete';

@Component({
  selector: 'app-add-prescription-form',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatSelectModule,
    MatAutocompleteModule
  ],
  templateUrl: './add-prescription-form.component.html',
  styleUrls: ['./add-prescription-form.component.css'],
})
export class AddPrescriptionFormComponent implements OnInit {
  @Input() patientId!: number;
  @Output() prescriptionAdded = new EventEmitter<void>();
  @Output() cancel = new EventEmitter<void>();

  private addMedicationUseCase = inject(AddMedicationUseCase);
  private fb = inject(FormBuilder);
  private http = inject(HttpClient);

  prescriptionForm: FormGroup;
  dosageForms: string[] = ['Comprimé', 'Crème', 'Gélule', 'Gouttes', 'Injection', 'Poudre', 'Sirop', 'Suppositoire'];
  allDrugs: string[] = [];
  filteredDrugs: Observable<string[]>[] = [];

  constructor() {
    this.prescriptionForm = this.fb.group({
      medicationDate: [new Date().toISOString().split('T')[0], Validators.required],
      medications: this.fb.array([])
    });
  }

  ngOnInit(): void {
    this.http.get<string[]>('assets/drugs.json').subscribe(data => {
      this.allDrugs = data;
      this.addMedication(); // Add the first medication form group after drugs are loaded
    });
  }

  createMedicationFormGroup(): FormGroup {
    return this.fb.group({
      medicationName: ['', Validators.required],
      medicationDuration: [''],
      dosageForm: [''],
      timesPerDay: [''],
      amount: ['']
    });
  }

  get medications(): FormArray {
    return this.prescriptionForm.get('medications') as FormArray;
  }

  addMedication() {
    const medicationFormGroup = this.createMedicationFormGroup();
    this.medications.push(medicationFormGroup);
    this.setupAutocomplete(this.medications.length - 1);
  }

  removeMedication(index: number) {
    this.medications.removeAt(index);
    this.filteredDrugs.splice(index, 1);
  }

  setupAutocomplete(index: number) {
    this.filteredDrugs[index] = this.medications.at(index).get('medicationName')!.valueChanges.pipe(
      startWith(''),
      map(value => this._filter(value || ''))
    );
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();
    return this.allDrugs.filter(drug => drug.toLowerCase().includes(filterValue));
  }

  onSubmit() {
    if (this.prescriptionForm.valid) {
      const formValues = this.prescriptionForm.value;
      const medications = formValues.medications.map((medication: any) => {
        return new MedicationEntity({
          medicationId: 0, // Will be generated by the backend
          patientId: this.patientId,
          medicationName: medication.medicationName,
          medicationDate: formValues.medicationDate,
          medicationDuration: medication.medicationDuration || '',
          dosageForm: medication.dosageForm || '',
          timesPerDay: medication.timesPerDay || '',
          amount: medication.amount || '',
        });
      });

      medications.forEach((medication: MedicationEntity) => {
        this.addMedicationUseCase.execute(medication).subscribe({
          next: () => {
            this.prescriptionAdded.emit();
          },
          error: (error) => {
            console.error('Error adding prescription:', error);
          },
        });
      });
    }
  }

  onCancel() {
    this.cancel.emit();
  }
}
