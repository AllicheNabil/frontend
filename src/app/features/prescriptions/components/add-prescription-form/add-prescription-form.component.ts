import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatSelectModule } from '@angular/material/select';
import { HttpClient } from '@angular/common/http';
import { Observable, startWith, map } from 'rxjs';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatListModule } from '@angular/material/list'; // New
import { MatDividerModule } from '@angular/material/divider'; // New
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { medicationForms } from '@app/core/const/strings.const';
import { AuthService } from '@app/auth/auth.service';
import { Patient } from '@app/features/patients/domain/patient-entity';
import { PatientFacade } from '@app/features/patients/facade/patient.facade';
import { Medication } from '../../domain/MedicationEntity';
import { PrescriptionFacade } from '../../facade/prescription.facade';

@Component({
  selector: 'app-add-prescription-form',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatSelectModule,
    MatAutocompleteModule,
    MatProgressSpinnerModule,
    MatListModule, // New
    MatDividerModule, // New
    MatDatepickerModule,
    MatNativeDateModule,
  ],
  templateUrl: './add-prescription-form.component.html',
  styleUrls: ['./add-prescription-form.component.css'],
})
export class AddPrescriptionFormComponent implements OnInit {
  @Input() patientId!: number;
  @Output() prescriptionAdded = new EventEmitter<void>();
  @Output() cancel = new EventEmitter<void>();

  readonly  medicationForms : string[] = medicationForms;

  private prescriptionFacade = inject(PrescriptionFacade);
  private fb = inject(FormBuilder);
  private http = inject(HttpClient);
  private authService = inject(AuthService);
  private patientFacade = inject(PatientFacade);

  patient: Patient | undefined;
  prescriptionForm: FormGroup;
  medicationForm: FormGroup; // New
  addedMedications: Medication[] = []; // New
  editingMedicationIndex: number | null = null; // New
  dosageForms: string[] = ['Comprimé', 'Crème', 'Gélule', 'Gouttes', 'Injection', 'Poudre', 'Sirop', 'Suppositoire'];
  durationUnits: string[] = ['jours', 'mois', 'boîtes'];
  allDrugs: string[] = [];
  filteredDrugs: Observable<string[]> = new Observable<string[]>(); // Changed from array to single Observable
  isLoadingDrugs = true;

  constructor() {
    this.medicationForm = this.createMedicationFormGroup();
    this.prescriptionForm = this.fb.group({
      medicationDate: [new Date().toISOString().split('T')[0], Validators.required],
    });
  }

  ngOnInit(): void {
    this.patientFacade.patient$.subscribe(patient => {
      this.patient = patient!;
    });
    this.patientFacade.loadPatient(this.patientId);

    this.http.get<string[]>('assets/drugs.json').subscribe(data => {
      this.allDrugs = data;
      this.isLoadingDrugs = false;
    });

    this.filteredDrugs = this.medicationForm.get('medicationName')!.valueChanges.pipe(
      startWith(''),
      map(value => this._filter(value || ''))
    );
  }

  createMedicationFormGroup(): FormGroup {
    return this.fb.group({
      medicationName: ['', Validators.required],
      medicationDuration: [''],
      medicationDurationUnit: ['jours'],
      dosageForm: [''],
      timesPerDay: [''],
      amount: ['']
    });
  }

  addMedicationToList() {
    if (this.medicationForm.valid) {
      const newMedication = new Medication({
        medicationId: 0, // Temporary, will be generated by backend
        patientId: this.patientId,
        medicationName: this.medicationForm.value.medicationName,
        medicationDate: this.prescriptionForm.value.medicationDate,
        medicationDuration: `${this.medicationForm.value.medicationDuration} ${this.medicationForm.value.medicationDurationUnit}`,
        dosageForm: this.medicationForm.value.dosageForm,
        timesPerDay: this.medicationForm.value.timesPerDay,
        amount: this.medicationForm.value.amount,
      });

      if (this.editingMedicationIndex !== null) {
        this.addedMedications[this.editingMedicationIndex] = newMedication;
        this.editingMedicationIndex = null;
      } else {
        this.addedMedications.push(newMedication);
      }
      this.medicationForm.reset();
      this.medicationForm.get('medicationDurationUnit')?.setValue('jours');
    }
  }

  editMedication(index: number) {
    this.editingMedicationIndex = index;
    const medicationToEdit = this.addedMedications[index];
    console.log('Medication to edit:', medicationToEdit); // Debug log

    let durationValue: number | string = '';
    let durationUnit: string = '';

    if (medicationToEdit.medicationDuration) {
      const parts = medicationToEdit.medicationDuration.split(' ');
      if (parts.length > 0) {
        const parsedValue = parseInt(parts[0]);
        durationValue = isNaN(parsedValue) ? parts[0] : parsedValue; // Keep as string if not a number
      }
      if (parts.length > 1) {
        durationUnit = parts[1];
      }
    }

    const patchData = {
      medicationName: medicationToEdit.medicationName,
      medicationDuration: durationValue,
      medicationDurationUnit: durationUnit,
      dosageForm: medicationToEdit.dosageForm,
      timesPerDay: medicationToEdit.timesPerDay,
      amount: medicationToEdit.amount,
    };
    console.log('Patching medicationForm with:', patchData); // Debug log

    this.medicationForm.patchValue(patchData);
    console.log('medicationForm after patchValue:', this.medicationForm.value); // Debug log
  }

  deleteMedicationFromList(index: number) {
    this.addedMedications.splice(index, 1);
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();
    return this.allDrugs.filter(drug => drug.toLowerCase().includes(filterValue));
  }

  onSubmit() {
    if (this.prescriptionForm.valid && this.addedMedications.length > 0) {
      const formValues = this.prescriptionForm.value;
      const userId = this.authService.currentUserId;
      if (userId) {
        this.addedMedications.forEach((medication: Medication) => {
          this.prescriptionFacade.addPrescription(medication);
        });

        this.prescriptionAdded.emit();
      }
    }
  }

  onCancel() {
    this.cancel.emit();
  }

  printPrescription(): void {
    if (this.prescriptionForm.valid && this.patient && this.addedMedications.length > 0) {
      const formValues = this.prescriptionForm.value;
      const userId = this.authService.currentUserId;
      if (userId) {
        const medicationsToPrint = this.addedMedications.map((medication: Medication) => {
          return new Medication({
            medicationId: medication.medicationId,
            patientId: medication.patientId,
            medicationName: medication.medicationName,
            medicationDate: formValues.medicationDate,
            medicationDuration: medication.medicationDuration,
            dosageForm: medication.dosageForm,
            timesPerDay: medication.timesPerDay,
            amount: medication.amount,
          });
        });
        this.prescriptionFacade.printPrescription(medicationsToPrint, this.patient, userId);
      }
    }
  }
}
